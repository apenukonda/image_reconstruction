import torch
import torch.nn.functional as F
import torch.nn as nn

class CRLoss(nn.Module):
    def __init__(self):
        super(CRLoss, self).__init__()

    def forward(self, generated, original, mask):
        """
        :param generated: The inpainted image generated by the model (B, C, H, W)
        :param original: The original (ground truth) image (B, C, H, W)
        :param mask: The binary mask indicating missing areas (B, 1, H, W)
        :return: CR loss value
        """
        # Mask the original image and generated image (ignore the known regions)
        masked_generated = generated * mask
        masked_original = original * mask
        
        # Calculate the L1 loss between masked generated and original images
        l1_loss = F.l1_loss(masked_generated, masked_original, reduction='mean')

        # Calculate the adversarial loss (could use a discriminator in a GAN setup, for now, just L1)
        # Add any other losses (e.g., feature matching loss or perceptual loss) if needed

        return l1_loss
